{"ast":null,"code":"export class CardApiService{static async getCards(){// Mock data for demo\nreturn[{id:'1',code:'c988e99',name:'persik',access:'PERMIT'},{id:'2',code:'c988e98',name:'office',access:'DENIED'}];}static async updateCard(id,updates){console.log(\"PUT \".concat(this.baseUrl,\"/cards/\").concat(id),updates);// Simulate API call\nawait new Promise(resolve=>setTimeout(resolve,500));}static async updateCardStatus(id,status){console.log(\"PUT \".concat(this.baseUrl,\"/cards/\").concat(id,\"/status\"),{status});await new Promise(resolve=>setTimeout(resolve,500));}static async deleteCard(id){console.log(\"DELETE \".concat(this.baseUrl,\"/cards/\").concat(id));await new Promise(resolve=>setTimeout(resolve,500));}static async getLockHistory(){// Mock data for demo\nreturn[{id:'1',time:'2025-09-06 14:30:25',cardName:'persik',cardCode:'c988e99'},{id:'2',time:'2025-09-06 12:15:42',cardName:'office',cardCode:'c988e98'},{id:'3',time:'2025-09-06 09:45:10',cardName:'persik',cardCode:'c988e99'}];}static async getLockStatus(){// Mock random status for demo\nreturn Math.random()>0.5?'opened':'closed';}static async getCurrentUser(){return{firstName:'Aliaskei',lastName:'Marchuk'};}}CardApiService.baseUrl=process.env.BACKEND_BASE_URL;","map":{"version":3,"names":["CardApiService","getCards","id","code","name","access","updateCard","updates","console","log","concat","baseUrl","Promise","resolve","setTimeout","updateCardStatus","status","deleteCard","getLockHistory","time","cardName","cardCode","getLockStatus","Math","random","getCurrentUser","firstName","lastName","process","env","BACKEND_BASE_URL"],"sources":["/Users/amarchuk/Documents/GitHub/Dimploma_RFID_based_door_lock/react_fronted_web/src/api/card/CardApiService.ts"],"sourcesContent":["import {LockHistoryEntry} from \"../../interfaces/lock_history/LockHistoryEntry\";\nimport {Card} from \"../../interfaces/card/Card\";\nimport {UserDTO} from \"../../interfaces/user/UserDTO\";\n\nexport class CardApiService {\n    private static baseUrl = process.env.BACKEND_BASE_URL;\n\n    static async getCards(): Promise<Card[]> {\n        // Mock data for demo\n        return [\n            { id: '1', code: 'c988e99', name: 'persik', access: 'PERMIT' },\n            { id: '2', code: 'c988e98', name: 'office', access: 'DENIED' },\n        ]\n    }\n\n    static async updateCard(id: string, updates: Partial<Card>): Promise<void> {\n        console.log(`PUT ${this.baseUrl}/cards/${id}`, updates);\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 500));\n    }\n\n    static async updateCardStatus(id: string, status: string): Promise<void> {\n        console.log(`PUT ${this.baseUrl}/cards/${id}/status`, { status });\n        await new Promise(resolve => setTimeout(resolve, 500));\n    }\n\n    static async deleteCard(id: string): Promise<void> {\n        console.log(`DELETE ${this.baseUrl}/cards/${id}`);\n        await new Promise(resolve => setTimeout(resolve, 500));\n    }\n\n    static async getLockHistory(): Promise<LockHistoryEntry[]> {\n        // Mock data for demo\n        return [\n            { id: '1', time: '2025-09-06 14:30:25', cardName: 'persik', cardCode: 'c988e99' },\n            { id: '2', time: '2025-09-06 12:15:42', cardName: 'office', cardCode: 'c988e98' },\n            { id: '3', time: '2025-09-06 09:45:10', cardName: 'persik', cardCode: 'c988e99' },\n        ];\n    }\n\n    static async getLockStatus(): Promise<'opened' | 'closed'> {\n        // Mock random status for demo\n        return Math.random() > 0.5 ? 'opened' : 'closed';\n    }\n\n    static async getCurrentUser(): Promise<UserDTO> {\n        return { firstName: 'Aliaskei', lastName:'Marchuk' };\n    }\n}"],"mappings":"AAIA,MAAO,MAAM,CAAAA,cAAe,CAGxB,YAAa,CAAAC,QAAQA,CAAA,CAAoB,CACrC;AACA,MAAO,CACH,CAAEC,EAAE,CAAE,GAAG,CAAEC,IAAI,CAAE,SAAS,CAAEC,IAAI,CAAE,QAAQ,CAAEC,MAAM,CAAE,QAAS,CAAC,CAC9D,CAAEH,EAAE,CAAE,GAAG,CAAEC,IAAI,CAAE,SAAS,CAAEC,IAAI,CAAE,QAAQ,CAAEC,MAAM,CAAE,QAAS,CAAC,CACjE,CACL,CAEA,YAAa,CAAAC,UAAUA,CAACJ,EAAU,CAAEK,OAAsB,CAAiB,CACvEC,OAAO,CAACC,GAAG,QAAAC,MAAA,CAAQ,IAAI,CAACC,OAAO,YAAAD,MAAA,CAAUR,EAAE,EAAIK,OAAO,CAAC,CACvD;AACA,KAAM,IAAI,CAAAK,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAC1D,CAEA,YAAa,CAAAE,gBAAgBA,CAACb,EAAU,CAAEc,MAAc,CAAiB,CACrER,OAAO,CAACC,GAAG,QAAAC,MAAA,CAAQ,IAAI,CAACC,OAAO,YAAAD,MAAA,CAAUR,EAAE,YAAW,CAAEc,MAAO,CAAC,CAAC,CACjE,KAAM,IAAI,CAAAJ,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAC1D,CAEA,YAAa,CAAAI,UAAUA,CAACf,EAAU,CAAiB,CAC/CM,OAAO,CAACC,GAAG,WAAAC,MAAA,CAAW,IAAI,CAACC,OAAO,YAAAD,MAAA,CAAUR,EAAE,CAAE,CAAC,CACjD,KAAM,IAAI,CAAAU,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAC1D,CAEA,YAAa,CAAAK,cAAcA,CAAA,CAAgC,CACvD;AACA,MAAO,CACH,CAAEhB,EAAE,CAAE,GAAG,CAAEiB,IAAI,CAAE,qBAAqB,CAAEC,QAAQ,CAAE,QAAQ,CAAEC,QAAQ,CAAE,SAAU,CAAC,CACjF,CAAEnB,EAAE,CAAE,GAAG,CAAEiB,IAAI,CAAE,qBAAqB,CAAEC,QAAQ,CAAE,QAAQ,CAAEC,QAAQ,CAAE,SAAU,CAAC,CACjF,CAAEnB,EAAE,CAAE,GAAG,CAAEiB,IAAI,CAAE,qBAAqB,CAAEC,QAAQ,CAAE,QAAQ,CAAEC,QAAQ,CAAE,SAAU,CAAC,CACpF,CACL,CAEA,YAAa,CAAAC,aAAaA,CAAA,CAAiC,CACvD;AACA,MAAO,CAAAC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CAAG,QAAQ,CAAG,QAAQ,CACpD,CAEA,YAAa,CAAAC,cAAcA,CAAA,CAAqB,CAC5C,MAAO,CAAEC,SAAS,CAAE,UAAU,CAAEC,QAAQ,CAAC,SAAU,CAAC,CACxD,CACJ,CA5Ca3B,cAAc,CACRW,OAAO,CAAGiB,OAAO,CAACC,GAAG,CAACC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}