{"ast":null,"code":"export class CardApiService {\n  static async getCards() {\n    // Mock data for demo\n    return [{\n      id: '1',\n      code: 'c988e99',\n      name: 'persik',\n      access: 'PERMIT'\n    }, {\n      id: '2',\n      code: 'c988e98',\n      name: 'office',\n      access: 'DENIED'\n    }];\n  }\n  static async updateCard(id, updates) {\n    console.log(`PUT ${this.baseUrl}/cards/${id}`, updates);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n  }\n  static async updateCardStatus(id, status) {\n    console.log(`PUT ${this.baseUrl}/cards/${id}/status`, {\n      status\n    });\n    await new Promise(resolve => setTimeout(resolve, 500));\n  }\n  static async deleteCard(id) {\n    console.log(`DELETE ${this.baseUrl}/cards/${id}`);\n    await new Promise(resolve => setTimeout(resolve, 500));\n  }\n  static async getLockHistory() {\n    // Mock data for demo\n    return [{\n      id: '1',\n      time: '2025-09-06 14:30:25',\n      cardName: 'persik',\n      cardCode: 'c988e99'\n    }, {\n      id: '2',\n      time: '2025-09-06 12:15:42',\n      cardName: 'office',\n      cardCode: 'c988e98'\n    }, {\n      id: '3',\n      time: '2025-09-06 09:45:10',\n      cardName: 'persik',\n      cardCode: 'c988e99'\n    }];\n  }\n  static async getLockStatus() {\n    // Mock random status for demo\n    return Math.random() > 0.5 ? 'opened' : 'closed';\n  }\n  static async getCurrentUser() {\n    return {\n      firstName: 'Aliaskei',\n      lastName: 'Marchuk'\n    };\n  }\n}\nCardApiService.baseUrl = process.env.BACKEND_BASE_URL;","map":{"version":3,"names":["CardApiService","getCards","id","code","name","access","updateCard","updates","console","log","baseUrl","Promise","resolve","setTimeout","updateCardStatus","status","deleteCard","getLockHistory","time","cardName","cardCode","getLockStatus","Math","random","getCurrentUser","firstName","lastName","process","env","BACKEND_BASE_URL"],"sources":["/Users/amarchuk/Documents/GitHub/Dimploma_RFID_based_door_lock/react_fronted_web/src/api/card/CardApiService.ts"],"sourcesContent":["import {LockHistoryEntry} from \"../../interfaces/lock_history/LockHistoryEntry\";\nimport {Card} from \"../../interfaces/card/Card\";\nimport {UserDTO} from \"../../interfaces/user/UserDTO\";\n\nexport class CardApiService {\n    private static baseUrl = process.env.BACKEND_BASE_URL;\n\n    static async getCards(): Promise<Card[]> {\n        // Mock data for demo\n        return [\n            { id: '1', code: 'c988e99', name: 'persik', access: 'PERMIT' },\n            { id: '2', code: 'c988e98', name: 'office', access: 'DENIED' },\n        ]\n    }\n\n    static async updateCard(id: string, updates: Partial<Card>): Promise<void> {\n        console.log(`PUT ${this.baseUrl}/cards/${id}`, updates);\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 500));\n    }\n\n    static async updateCardStatus(id: string, status: string): Promise<void> {\n        console.log(`PUT ${this.baseUrl}/cards/${id}/status`, { status });\n        await new Promise(resolve => setTimeout(resolve, 500));\n    }\n\n    static async deleteCard(id: string): Promise<void> {\n        console.log(`DELETE ${this.baseUrl}/cards/${id}`);\n        await new Promise(resolve => setTimeout(resolve, 500));\n    }\n\n    static async getLockHistory(): Promise<LockHistoryEntry[]> {\n        // Mock data for demo\n        return [\n            { id: '1', time: '2025-09-06 14:30:25', cardName: 'persik', cardCode: 'c988e99' },\n            { id: '2', time: '2025-09-06 12:15:42', cardName: 'office', cardCode: 'c988e98' },\n            { id: '3', time: '2025-09-06 09:45:10', cardName: 'persik', cardCode: 'c988e99' },\n        ];\n    }\n\n    static async getLockStatus(): Promise<'opened' | 'closed'> {\n        // Mock random status for demo\n        return Math.random() > 0.5 ? 'opened' : 'closed';\n    }\n\n    static async getCurrentUser(): Promise<UserDTO> {\n        return { firstName: 'Aliaskei', lastName:'Marchuk' };\n    }\n}"],"mappings":"AAIA,OAAO,MAAMA,cAAc,CAAC;EAGxB,aAAaC,QAAQA,CAAA,EAAoB;IACrC;IACA,OAAO,CACH;MAAEC,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE,QAAQ;MAAEC,MAAM,EAAE;IAAS,CAAC,EAC9D;MAAEH,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE,QAAQ;MAAEC,MAAM,EAAE;IAAS,CAAC,CACjE;EACL;EAEA,aAAaC,UAAUA,CAACJ,EAAU,EAAEK,OAAsB,EAAiB;IACvEC,OAAO,CAACC,GAAG,CAAC,OAAO,IAAI,CAACC,OAAO,UAAUR,EAAE,EAAE,EAAEK,OAAO,CAAC;IACvD;IACA,MAAM,IAAII,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;EAC1D;EAEA,aAAaE,gBAAgBA,CAACZ,EAAU,EAAEa,MAAc,EAAiB;IACrEP,OAAO,CAACC,GAAG,CAAC,OAAO,IAAI,CAACC,OAAO,UAAUR,EAAE,SAAS,EAAE;MAAEa;IAAO,CAAC,CAAC;IACjE,MAAM,IAAIJ,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;EAC1D;EAEA,aAAaI,UAAUA,CAACd,EAAU,EAAiB;IAC/CM,OAAO,CAACC,GAAG,CAAC,UAAU,IAAI,CAACC,OAAO,UAAUR,EAAE,EAAE,CAAC;IACjD,MAAM,IAAIS,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;EAC1D;EAEA,aAAaK,cAAcA,CAAA,EAAgC;IACvD;IACA,OAAO,CACH;MAAEf,EAAE,EAAE,GAAG;MAAEgB,IAAI,EAAE,qBAAqB;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,QAAQ,EAAE;IAAU,CAAC,EACjF;MAAElB,EAAE,EAAE,GAAG;MAAEgB,IAAI,EAAE,qBAAqB;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,QAAQ,EAAE;IAAU,CAAC,EACjF;MAAElB,EAAE,EAAE,GAAG;MAAEgB,IAAI,EAAE,qBAAqB;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,QAAQ,EAAE;IAAU,CAAC,CACpF;EACL;EAEA,aAAaC,aAAaA,CAAA,EAAiC;IACvD;IACA,OAAOC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,QAAQ,GAAG,QAAQ;EACpD;EAEA,aAAaC,cAAcA,CAAA,EAAqB;IAC5C,OAAO;MAAEC,SAAS,EAAE,UAAU;MAAEC,QAAQ,EAAC;IAAU,CAAC;EACxD;AACJ;AA5Ca1B,cAAc,CACRU,OAAO,GAAGiB,OAAO,CAACC,GAAG,CAACC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}